import React, {Component} from 'react';
import './index.css';
import Form from "../../components/Form";
import TopHeader from "../../components/TopHeader";
import {Button, Modal, Table} from "antd";

const questions = [
  ['我乐于助人', '我喜欢把东西拆开，了解其工作原理和运作的奥妙'],
  ['我喜欢与关注未来的人交往', '我喜欢和历史学家交往'],
  ['我想要每个人都喜欢我', '我想要人们崇拜我'],
  ['我力争第一', '我重在参与'],
  ['我一贯努力工作', '我做事进展较慢，但确保成效'],
  ['我思考自身的长处', '我思考有待改进之处'],
  ['我是一个偏重情感的人', '我是一个偏重理智的人'],
  ['我了解别人的个性特点', '我能够接受各种类型的人'],
  ['主动与人交谈使我为难', '与陌生人攀谈使我兴奋'],
  ['我对生活感觉极好', '我认为我自己很能干'],
  ['我喜欢与人合作', '我喜欢个人奋斗'],
  ['我能使别人有成就感', '我能使别人感到我对他们很重要'],
  ['我按照自己的世界观去生活', '我按照自己的理想去生活'],
  ['成为他人的知己使我满足', '我希望成为他人的领导'],
  ['我不在意别人对我的所作所为怎么看，我做对自己有利的事', '我始终清楚别人对我的看法'],
  ['我致力于发展', '我信守自己的价值观'],
  ['我要自己的生活保持平衡', '我希望我的家庭过最好的生活'],
  ['我每天多次谈到自己对未来的展望', '我愿腾出时间思考未来'],
  ['我能够使别人兴奋起来', '我能够使别人平静下来'],
  ['我一旦作出决定就必须付诸行动', '我在行动之前需要确认自己行动无误'],
  ['我比大多数人更加专心去做要完成的事', '我统观全局顺其自然'],
  ['我认为世上没有巧合，一切都事出有因', '对我来说巧合指运气、机遇、侥幸、偶然'],
  ['我善于交谈', '我善于倾听'],
  ['我喜欢表扬别人', '我喜欢受到表扬'],
  ['我喜欢竞赛', '我喜欢工作'],
  ['我思考问题脚踏实地，善于借助专家寻找正确答案；善于借助专家寻找正确答案', '我思考问题善于创造，且有战略眼光，对规律和问题一目了然'],
  ['我充满活力，满怀喜悦和欢乐', '我了解影响形势的所有因素'],
  ['我想成为一家大公司的总裁', '我为别人牵线搭桥'],
  ['我有时会威逼别人', '我在大人物面前感到渺小'],
  ['我能设身处地为别着想', '我能够爱别人，爱所有的人'],
  ['我推动别人成功', '我使别人快乐'],
  ['我是一个无忧无虑的人', '我比我的朋友、同事更成熟'],
  ['我尽量与别人一起做事', '我喜欢为别人张罗'],
  ['通过研究我的历史我可以预测未来', '我的过去与我的未来无关'],
  ['我属于超越自我的宏观世界', '我是一个脚踏实地的人'],
  ['我要我的工作和生活融为一体', '工作只是一种谋生的手段'],
  ['有人不喜欢我时，我会感到沮丧', '如果自己认为不对的事，就会感到内疚'],
  ['我组织', '我分析'],
  ['我能把握对别人的谈话要点，使他们感觉良好', '我通过倾听，使人们感觉获得理解'],
  ['我喜欢富于哲理的人', '我喜欢和勤奋而富有成效的人交往'],
  ['我乐于使别人认识其自身的价值', '我乐于使别人有成就感'],
  ['我靠直觉解决问题', '我使用来源可靠的准确信息'],
  ['我对生活持有一种健康的怀疑态度', '我相信自己与全人类相连'],
  ['我的朋友请我讲故事', '我的朋友请我出主意'],
  ['我在上午工作效率最高', '我在晚上工作效率最高'],
  ['我与大多数人比不相上下，无需工作更努力，更持久', '我精力充沛，始终比大多数人工作更努力，更持久'],
  ['任何与体育有关的事都会强烈吸引我', '任何与人文思想有关的事都会强烈吸引我；'],
  ['我是一个十分整洁的人', '我非常固执'],
  ['我通过与别人分享而成长', '我通过学习而成长'],
  ['我按照自己对未来的书面规划而行动', '我走一步，看一步'],
  ['我注重未来可能取得的成就', '我注重应对未来可能发生的事件'],
  ['我不排斥任何人，从而不伤害他们的感情', '我仔细挑选我的朋友'],
  ['我不自负，不在乎别人是否把我视为可信、专业化或成功人士', '别人是否把我视为可信、专业化或成功人士对我很重要；'],
  ['我喜欢了解大战的起因', '我喜欢了解50年后的世界经济'],
  ['我对我生活中的遇到事件进行分析', '我对影响我生活的事件充满激情'],
  ['我通过发挥自身的才干取得进步', '我通过克服自身的弱点取得进步；'],
  ['对我来说每件事都必须事先计划', '我喜欢顺其自然'],
  ['我寻找各种不同的做事方法', '我确立常规的做事方法'],
  ['我讨厌爱发脾气的人', '我认为必要时可以发脾气'],
  ['我喜欢放松', '我喜欢清扫'],
  ['有钱就是幸福', '有钱不等于幸福'],
  ['我征求别人的意见', '别人征求我的意见'],
  ['我认为平等对待所有人，并制定明确的规则至关重要', '我认为应了解每个人的特点，并进行个别激励'],
  ['我借助专家寻找正确答案', '我对答案和问题一目了然'],
  ['我非常慷慨地称赞别人', '我有选择地称赞别人'],
  ['我只有在竞争中赢得第一才能感到完全满意', '我只要在比赛中名列前茅就感到高兴'],
  ['我善于使截然不同的人相互合作', '我有平等对待人的天赋'],
  ['我尽量不离开自己舒适的领地', '我是一个寻求刺激的人'],
  ['我能够体会同事的感受', '我喜欢和同事们高谈阔论'],
  ['我关注人们的特点，而不在乎我是否喜欢他们', '我不喜欢某些人，他们和我格格不入'],
  ['我凭感觉进行重要决策', '我凭理智进行重要决策；'],
  ['我随着事情的发生采取行动', '我分清事情的轻重缓急，然后采取行动'],
  ['我喜欢每个人', '我要每个人都喜欢我'],
  ['根据当前的需要，我主要专著做好眼前的事', '我着眼于未来的发展'],
  ['我每周设定业绩目标', '我的工作根据当日需求而定'],
  ['我必须强迫自己才能学习', '我对自己感兴趣的事能集中注意力'],
  ['我喜欢要求精确性的工作', '我喜欢团队合作'],
  ['我研究别人的行为根源', '我惯于自我反思'],
  ['我按部就班', '我热情洋溢'],
  ['我对教育满怀热忱', '我对消除暴利满怀热忱'],
  ['我喜欢别人听我讲话', '我喜欢听别人讲话'],
  ['我很会讲故事', '我善于辅导'],
  ['我喜欢讲话', '我喜欢思考'],
  ['我是个完美主义者', '我是个实干家'],
  ['我思考问题脚踏实地,广泛调查分析', '我思考问题善于创造，且具有战略眼光'],
  ['我总是描准最出色的同行去改进自己', '我愿意与欣赏我的长处的人交往'],
  ['我能同时照顾好几件事', '我愿意为别人作出牺牲'],
  ['我善于交际', '我喜欢与朋友一道努力工作'],
  ['我思维敏捷,经常提出独特的观点', '我的谈话使人愉快'],
  ['我热爱学习', '我喜欢外出'],
  ['我喜欢一切按照规章制度办事', '我喜欢反复检查，确保一切井井有条'],
  ['我善于观察人们之间的区别', '我平等对待所有人'],
  ['我的成功之道在于克服弱点，弥补缺陷', '我的成功之道在于增强自身的才干'],
  ['在遇到困难，而必须圆满完成任务时，我往往亲自动手干', '在遇到困难，而必须圆满完成任务时，我往往依靠团队成员的各自优势，而不事必躬亲'],
  ['我的性格外向', '在必要时我能够作到开朗大方'],
  ['我喜欢解释事情', '我喜欢做事情'],
  ['有时也可以歪曲事实', '永远没有理由说谎'],
  ['我的工作已经满负荷', '我还有很大潜力'],
  ['我以严谨著称', '我以幽默感著称'],
  ['我正在创造我的未来', '我正在研究我的未来'],
  ['我喜欢挑战别人', '我喜欢鼓励别人'],
  ['我是一个非常在意隐私的人', '我的生活如同一本开启的书'],
  ['我慷慨', '我节俭'],
  ['我是一名领导者', '我是一名很有成就的人'],
  ['我有时会奉承别人', '我为人正直'],
  ['我能根据需要长时间学习', '我能够集中注意力的时间很短'],
  ['我避免过分赞扬人，因此当我这样做时就显得很有份量', '我慷慨地赞扬我的同事'],
  ['我愿意了解新事物', '我的价值观很稳定'],
  ['我的生活有目的', '我的生活充满欢乐'],
  ['我喜欢富有哲理的讨论', '我喜欢制定目标的会议'],
  ['我喜欢独处', '我想念我的朋友'],
  ['我想象未来', '我理解造成当前情形的原因'],
  ['我能够实事求是地看待自己', '我难于坦诚地看待自己'],
  ['我愿意花大量的时间和朋友们在一起', '我喜欢专心做我认为重要的事情'],
  ['我小时候喜欢和一大帮朋友们一起玩', '我小时候循规蹈矩从不给同伴或大人惹麻烦'],
  ['我喜欢招待别人', '我答应别人的事一定要完成'],
  ['我讨厌受控制', '我喜欢制定规矩'],
  ['我是一个好老师', '我是一个好顾问'],
  ['我躲避大大咧咧的人', '我不与不诚实的人交往'],
  ['情况不明时我会向心中有数的人求教', '无论何时何地我总能悟出该作什么'],
  ['目标不明的人使我厌烦', '我不喜欢和无法放松的相处'],
  ['我厌恶期限', '我的责任感给我动力'],
  ['我鼓励别人', '我强化别人'],
  ['我过于轻信别人', '我过于雄心勃勃'],
  ['过去发生的事激励我', '未来可能取得的成就激励我'],
  ['最后一刻压力使我思想高度集中', '当我能提前完成任务时，我的思维更清晰'],
  ['我认为只要环境合适，大多数人都会偷窃', '我认为偷窃的人应受到惩罚'],
  ['我的最大愿望是做自己热爱的工作', '我的最大需求是被别人接受'],
  ['我是一个通情达理的人', '我是一个有责任心的人'],
  ['我主要关注此时此地', '我通过研究过去，增长见识'],
  ['我尽力而为使我感到满足', '我立志有所建树'],
  ['我有强烈的求知欲', '我需要被别人认知和理解'],
  ['我经常考虑因果关系', '我遇到事情及时应对'],
  ['寻找失败的原因', '享受目前的成功'],
  ['我喜欢收藏', '我只收集我认为十分精美或特别有价值的东西'],
  ['我常常能提出建设性的意见', '当解决了难题、排除了故障时我感到特有成就感'],
  ['我待人随和', '我善于发挥不同的人的长处'],
  ['我花较多的时间考虑如何取得竞争优势', '我花更多时间考虑如何应对未来可能发生的问题；'],
  ['我认为竞争才能发挥人的最大潜能，所以我刺激我的员工相互竞争', '我能使很多人在一起同甘共苦相互合作，并建立很深的友谊'],
  ['我常常从失败中总结教训', '我只关注如何把我最擅长的事做得尽善尽美'],
  ['我尽力使别发挥其特长', '我尽力使每个人得到进步'],
  ['把晚间、周末工作时间加起来，我通常一周工作40-50小时', '把晚间、周末工作时间加起来，我通常一周工作60超过小时'],
  ['我轻松愉快', '我严肃认真'],
  ['开始新任务对我很容易', '我的问题是做事有始有终'],
  ['我能和所有的人和睦相处', '我仔细分析我的合作伙伴,尽可能了解每个人的个性和背景'],
  ['我兴趣广泛，好奇心强', '我专注把握我感兴趣的事做好，'],
  ['我观察生活', '我主宰自己的生活'],
  ['为了解决一个问题，我常契而不舍地长时间工作', '我最多只能集中精力工作学习一个小时左右'],
  ['我的成就非凡', '我一贯创造积极成果'],
  ['我比别人更机智', '我在很多人面前感到渺小'],
  ['我善于高效率地同时作几件事', '我习惯于一次只做一件事'],
  ['我希望经常与我的上司和同事沟通', '我希望有更多的自己独立支配的时间'],
  ['我善于构思并发起一个新项目', '我善于组织落实'],
  ['我经常思考数字', '我喜欢思考宏观形象的事情'],
  ['我偏爱讨论思想', '我偏爱体育运动'],
  ['我的词汇富于哲理', '我的词汇偏重实用'],
  ['我使用简短的词汇', '我常用复杂抽象的词汇'],
  ['我的大脑不停地思考', '我的身体需要经常活动'],
  ['我喜欢听讲', '我喜欢小组讨论'],
  ['帮助别人解决难题，排除故障使我感到快乐', '从数据中发现规律使我感到兴奋；'],
  ['我关注分析时事', '我不花时间去关注时事'],
  ['我总能及时完成任务', '我言而有信，说到做到'],
  ['一个新创意会使我激动不已', '完成一件交给我的任务会使我激动不已'],
  ['和别人一起时我觉得我的点子最多', '我喜欢和别人一起讨论解决问题的办法'],
  ['我能详细解释复杂过程', '我有化繁为简的天赋'],
  ['我能一晚读完200页的书', '我阅读速度缓慢，因为我要琢磨理解书中的内容'],
  ['取胜最重要', '按规矩做事最重要'],
  ['我的哲学指引我的生活', '我的主导自己的生活'],
  ['我每周至少花5个小时独自思考', '我喜欢和别人在一起'],
  ['我了解自身长处超过弱点', '我了解自身弱点超过长处'],
  ['我不在乎别人是否喜欢我', '我热爱人们'],
  ['我喜欢和别人谈起我的旅行经历', '我不断策划我的下一个旅行目标'],
  ['我经常以我的亲身经历教育别人', '我喜欢树立榜样激励别人'],
  ['我认为一个好的领导就是要能够调动别人做事', '我认为一个好的领导就是要帮助别人更好地做事'],
  ['我善于处理纷繁复杂的事务', '我喜欢制定统一的常规制度'],
  ['我习惯于根据统计数字预测未来', '我习惯于根据当前形势预测未来'],
  ['我特别善于通过例举过去已取得的成就来鼓舞别人', '我特别善于通过描绘未来远景鼓励别人'],
  ['我有几个特别要好的老朋友', '我认识的很多朋友，但几乎没有交情很深的'],
  ['我习惯于事先想好将要采购商品的标准，只要看到基本符合我需求的商品立刻就买', '我事先不考虑太多，到了商场现场，调查一遍之后，再决定购买'],
  ['遇到故障或困难时，我常常一马当先', '遇到故障或困难时,我往往首先想到找个能人来解决'],
];

const talents = [
  '成就', '行动', '适应', '分析', '统筹', '信仰', '统率', '沟通', '竞争', '关联',
  '回顾', '审慎', '伯乐', '纪律', '体谅', '公平', '专注', '前瞻', '和谐', '理念',
  '包容', '个别', '搜集', '思维', '学习', '完美', '积极', '交往', '责任', '排难',
  '自信', '追求', '战略', '取悦',
];

const topic = ['执行力', '影响力', '关系建立', '战略思维'];

const belong = [0, 1, 2, 3, 0, 0, 1, 1, 1, 2, 3, 0, 2, 0, 2, 0, 0, 3, 2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 0, 0, 1, 1, 3, 1];

const talent_count = [19, 18, 18, 19, 15, 17, 15, 16, 15, 18, 15, 20, 16, 17, 15, 16, 16, 16, 16, 18, 17, 16, 17, 20, 16, 17, 16, 16, 16, 16, 17, 19, 20, 16];

const mapping = [
  [[3, 1], [5, -1], [14, -1], [24, 1], [27, -1], [29, -1]],
  [[10, 1], [17, -1]],
  [[31, 1], [33, -1]],
  [[0, -1], [8, -1], [24, 1], [25, -1]],
  [[0, -1], [28, 1]],
  [[25, -1], [31, 1]],
  [[3, 1], [4, 1], [5, -1], [6, 1], [11, 1], [14, -1], [15, -1], [32, 1], [33, -1]],
  [[14, -1], [15, 1], [20, 1], [21, -1]],
  [[11, -1], [33, 1]],
  [[26, -1], [30, 1]],
  [[20, -1], [23, 1], [27, -1], [30, 1]],
  [[6, 1], [12, -1]],
  [[5, -1], [25, 1]],
  [[6, 1], [27, -1]],
  [[6, -1], [14, 1]],
  [[5, 1], [17, -1]],
  [[11, -1], [25, 1], [31, 1]],
  [[17, -1], [31, 1], [32, 1]],
  [[18, 1], [26, -1]],
  [[1, -1], [11, 1]],
  [[2, 1], [16, -1]],
  [[2, 1], [9, -1]],
  [[7, -1], [14, 1]],
  [[0, 1], [12, -1], [26, -1], [31, 1], [33, -1]],
  [[8, -1], [27, 1]],
  [[9, -1], [19, 1], [23, 1], [32, 1]],
  [[3, 1], [11, -1], [26, -1]],
  [[0, -1], [6, -1], [12, 1], [31, -1]],
  [[6, -1], [18, 1]],
  [[5, 1], [14, -1], [15, 1], [21, -1]],
  [[12, -1], [26, 1]],
  [[4, 1], [11, 1], [26, -1], [32, 1]],
  [[4, 1], [12, 1], [18, -1], [20, -1], [29, 1], [33, 1]],
  [[2, 1], [10, -1]],
  [[1, 1], [17, -1]],
  [[2, 1], [5, -1], [31, -1]],
  [[28, 1], [31, -1]],
  [[1, -1], [3, 1], [6, -1]],
  [[7, -1], [14, -1], [33, 1]],
  [[1, 1], [19, -1]],
  [[21, -1], [26, 1]],
  [[2, -1], [3, 1], [11, 1], [22, 1], [30, -1]],
  [[3, -1], [9, 1], [11, -1]],
  [[7, -1], [29, 1], [32, 1]],
  [[1, -1], [23, 1]],
  [[0, 1], [30, -1]],
  [[1, -1], [19, 1], [23, 1]],
  [[1, -1], [6, 1], [30, 1]],
  [[22, 1], [23, 1], [24, 1], [27, -1]],
  [[2, 1], [13, -1], [18, 1]],
  [[11, 1], [17, -1], [32, 1]],
  [[11, 1], [15, -1], [18, -1]],
  [[8, 1], [9, -1], [31, 1]],
  [[10, -1], [17, 1]],
  [[3, -1], [10, -1], [17, 1], [23, -1], [25, -1], [26, 1]],
  [[10, 1], [25, 1]],
  [[2, 1], [13, -1]],
  [[13, 1], [15, 1], [21, -1]],
  [[6, 1], [9, -1]],
  [[13, 1], [26, -1]],
  [[9, 1], [26, -1]],
  [[4, 1], [6, 1], [9, -1], [18, -1], [20, -1], [22, -1], [32, 1]],
  [[15, -1], [21, 1]],
  [[22, -1], [23, 1]],
  [[11, 1], [26, -1]],
  [[0, -1], [8, -1], [24, 1], [25, -1], [26, 1], [31, -1]],
  [[15, 1], [18, -1], [21, -1], [27, -1]],
  [[11, -1], [30, 1]],
  [[7, 1], [14, -1], [18, -1], [20, 1], [21, -1], [33, 1]],
  [[11, 1], [21, -1], [22, -1]],
  [[3, 1], [11, 1], [30, -1], [32, 1]],
  [[2, -1], [4, 1]],
  [[14, -1], [33, 1]],
  [[2, -1], [16, -1], [17, 1], [32, 1]],
  [[2, 1], [13, -1], [16, -1], [17, -1]],
  [[16, 1], [23, 1], [24, 1]],
  [[13, -1], [20, 1], [27, 1]],
  [[3, -1], [9, -1], [23, 1]],
  [[2, 1], [4, -1], [13, -1], [16, -1], [26, 1]],
  [[5, -1], [29, 1]],
  [[6, -1], [14, 1]],
  [[7, -1], [10, -1], [12, 1], [29, 1]],
  [[7, -1], [23, 1]],
  [[1, 1], [8, -1], [25, -1]],
  [[1, -1], [3, -1], [19, 1], [22, -1], [32, 1]],
  [[0, -1], [8, -1], [22, -1], [24, -1], [25, 1], [31, -1]],
  [[4, -1], [5, 1]],
  [[7, -1], [18, 1], [20, 1], [27, -1], [33, -1]],
  [[7, 1], [19, -1], [27, 1], [33, 1]],
  [[1, 1], [22, 1], [24, -1]],
  [[11, -1], [13, -1], [15, -1]],
  [[14, -1], [15, 1], [21, -1]],
  [[25, 1], [28, -1], [31, -1]],
  [[1, -1], [4, 1], [6, 1], [28, -1]],
  [[7, -1], [14, 1], [33, -1]],
  [[1, 1], [32, -1]],
  [[2, -1], [5, 1], [13, 1]],
  [[30, 1]],
  [[7, 1], [13, -1], [26, 1]],
  [[1, -1], [17, 1], [32, 1]],
  [[12, 1], [30, -1], [31, -1]],
  [[11, -1], [27, 1]],
  [[11, -1], [27, -1]],
  [[0, 1], [6, -1], [28, -1]],
  [[11, 1], [33, -1]],
  [[16, -1], [24, -1]],
  [[11, -1], [33, 1]],
  [[5, 1], [22, -1]],
  [[0, -1], [26, 1]],
  [[0, 1], [19, -1]],
  [[23, -1], [27, 1]],
  [[3, 1], [9, 1], [10, 1], [17, -1]],
  [[9, -1], [30, 1]],
  [[16, 1], [27, -1]],
  [[13, 1], [20, -1]],
  [[20, -1], [28, 1]],
  [[13, 1], [31, -1]],
  [[7, -1], [12, 1], [29, 1]],
  [[5, 1], [28, 1]],
  [[22, -1], [30, 1]],
  [[26, 1], [31, -1]],
  [[2, -1], [13, 1], [28, 1]],
  [[12, -1], [20, -1]],
  [[27, -1], [30, 1]],
  [[0, 1], [10, -1], [17, 1]],
  [[4, -1], [28, -1], [29, -1]],
  [[2, -1], [5, 1], [28, 1]],
  [[5, -1], [24, -1], [31, 1]],
  [[14, -1], [15, -1], [28, 1]],
  [[10, 1], [16, -1]],
  [[0, 1], [18, -1], [24, -1], [31, 1]],
  [[24, -1], [31, 1]],
  [[1, 1], [3, -1], [32, -1]],
  [[0, 1], [3, -1], [9, -1], [10, -1]],
  [[22, -1], [25, 1]],
  [[0, 1], [19, -1], [29, 1]],
  [[12, 1], [15, -1], [20, -1], [21, 1], [25, 1], [33, -1]],
  [[8, -1], [17, 1], [29, 1], [32, 1]],
  [[7, 1], [8, -1], [9, 1], [15, -1], [18, 1], [20, 1], [27, 1], [29, -1]],
  [[3, -1], [10, -1], [16, 1], [23, 1], [24, 1], [25, 1], [29, -1]],
  [[12, -1], [15, 1], [21, -1], [25, -1]],
  [[0, 1], [16, 1]],
  [[0, 1], [8, 1], [13, 1], [28, 1], [32, 1]],
  [[1, -1], [28, 1]],
  [[7, -1], [8, -1], [9, -1], [11, 1], [12, 1], [14, -1], [15, -1], [18, -1], [20, -1], [21, 1], [22, 1], [33, -1]],
  [[16, 1], [22, -1], [23, 1], [25, 1]],
  [[2, -1], [4, 1], [14, -1], [18, -1], [19, 1], [30, 1]],
  [[16, -1], [29, -1]],
  [[0, -1], [8, -1], [24, 1], [25, -1], [30, -1]],
  [[4, -1], [8, -1], [18, 1], [19, -1], [32, -1]],
  [[4, -1], [16, 1]],
  [[2, -1], [7, -1], [9, -1], [20, -1], [21, -1], [22, -1], [23, 1], [31, 1]],
  [[1, 1], [4, 1], [6, -1], [19, -1], [29, 1], [32, -1]],
  [[3, -1], [6, 1], [16, -1], [19, 1], [32, 1]],
  [[8, 1], [19, -1], [23, -1], [24, -1]],
  [[1, 1], [19, -1]],
  [[3, 1], [7, -1]],
  [[1, 1], [19, -1], [23, -1]],
  [[18, -1], [20, 1]],
  [[0, -1], [3, 1], [5, -1], [28, -1], [29, -1]],
  [[19, -1], [23, -1], [24, -1]],
  [[5, 1], [13, -1], [28, 1]],
  [[16, 1], [19, -1], [28, -1]],
  [[9, 1], [19, -1], [20, 1], [21, 1], [23, -1]],
  [[3, -1], [16, -1], [19, 1], [23, -1]],
  [[3, -1], [24, 1]],
  [[0, -1], [8, -1], [13, 1], [15, 1], [21, -1]],
  [[5, -1], [30, 1], [32, 1]],
  [[9, 1], [18, 1], [20, 1], [23, -1]],
  [[9, 1], [25, -1]],
  [[5, 1], [30, -1]],
  [[10, -1], [17, 1]],
  [[8, 1], [10, -1], [12, -1], [22, 1]],
  [[4, -1], [12, 1], [29, 1]],
  [[2, -1], [4, -1], [13, 1], [15, 1]],
  [[10, -1], [17, 1]],
  [[7, 1], [10, -1], [12, -1], [17, 1], [22, -1]],
  [[27, -1], [33, 1]],
  [[2, 1], [22, 1], [32, -1]],
  [[9, 1], [12, 1], [21, 1], [29, -1], [30, -1]],
];

export default class App extends Component {

  constructor(props) {
    super(props);
    this.state = {
      selects: Array(questions.length).fill(null),
      visible: false,
      lack_question_idx: [],
      scope_list: [],
    };
  }

  onChange(idx) {
    const that = this;

    function set(e) {
      let selects = that.state.selects;
      selects[idx] = e.target.value;
      that.setState({selects: selects});
    }

    return set;
  }

  gen_question_data() {
    return questions.map((value, idx) => {
      return {
        index: idx + 1,
        q1: questions[idx][0],
        select: this.state.selects[idx],
        q2: questions[idx][1],
      };
    });
  }

  count_down(idx, scope_list, scope, mode) {
    for (let _idx in mapping[idx]) {
      let point = mapping[idx][_idx];

      if (point[1] !== mode) continue;

      scope_list[point[0]] += scope * point[1] + 1;
    }
  }

  get_result() {
    // todo: 生成结果
    const {selects} = this.state;

    let check_mode = false;
    let lack_question_idx = [];
    let scope_list = Array(talents.length).fill(0);

    for (let idx in selects) {
      let scope = selects[idx];

      if (scope == null) {

        if (!check_mode) check_mode = true;

        lack_question_idx.push(parseInt(idx) + 1)

      } else if (check_mode) {
        continue;
      }

      if (scope === 0) {

        for (let _idx in mapping[idx]) {
          let point = mapping[idx][_idx];
          scope_list[point[0]]++;
        }

      } else if (scope < 0) {

        this.count_down(idx, scope_list, scope, -1)

      } else if (scope > 0) {

        this.count_down(idx, scope_list, scope, 1)

      } else {
        check_mode = true;
      }

    }

    this.setState({lack_question_idx, scope_list});

  }

  showModal = () => {
    this.get_result();
    this.setState({
      visible: true,
    });
  };

  handleOk = (e) => {
    this.setState({
      visible: false,
    });
  };

  handleCancel = (e) => {
    this.setState({
      visible: false,
    });
  };

  showResult() {
    if (this.state.lack_question_idx.length) return null;

    const data = this.state.scope_list.map(
      (val, idx) => ({
        name: talents[idx],
        scope: parseInt(val * 1000 / talent_count[idx]),
        index: parseInt(idx) + 1,
        topic: topic[belong[idx]],
        belong: belong[idx]
      }));

    const columns = [
      {
        title: '序号',
        dataIndex: 'index',
        sorter: (a, b) => a.index - b.index,
      },
      {
        title: '主题',
        dataIndex: 'topic',
        sorter: (a, b) => a.belong - b.belong,
        filters: topic.map((value, idx) => ({text: value, value: idx})),
        onFilter: (value, record) => record.belong === 0,
      },
      {
        title: '优势',
        dataIndex: 'name',
      },
      {
        title: '分数',
        dataIndex: 'scope',
        sorter: (a, b) => a.scope - b.scope,
      },
    ];

    return (
      <Table rowKey='index'
             columns={columns} dataSource={data}
             size="small" pagination={false}/>
    )

  }

  render = () => (
    <TopHeader title="公益人优势测评" subTitle="寻找你的优势领域">
      <div className="App">
        <Form questions={this.gen_question_data()} onChange={this.onChange.bind(this)}/>
        <Button type="primary" onClick={this.showModal} style={{margin: "50px"}}>
          提交报告 生成测试结果
        </Button>
        <Modal
          title={this.state.lack_question_idx.length ? "以下题目尚未填写" : "评测报告"}
          visible={this.state.visible}
          onOk={this.handleOk}
          onCancel={this.handleCancel}
        >

          {
            this.state.lack_question_idx.map((value, idx) =>
              (<span key={idx} style={{
                backgroundColor: '#212121',
                color: '#fff',
                marginRight: '10px'
              }}>{value}</span>))
          }

          {this.showResult()}

        </Modal>

      </div>
    </TopHeader>
  );
}
